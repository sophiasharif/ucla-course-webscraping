{"COM SCI 181": {"title": "Introduction to Formal Languages and Automata Theory", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 180. Designed for junior/senior Computer Science majors. Grammars, automata, and languages. Finite-state languages and finite-state automata. Context-free languages and pushdown story automata. Unrestricted rewriting systems, recursively enumerable and recursive languages, and Turing machines. Closure properties, pumping lemmas, and decision algorithms. Introduction to computability. Letter grading.", "pre-reqs": ["COM SCI 180"], "co-reqs": []}, "COM SCI 180": {"title": "Introduction to Algorithms and Complexity", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: course 32, Mathematics 61. Designed for junior/senior Computer Science majors. Introduction to design and analysis of algorithms. Design techniques: divide-and-conquer, greedy method, dynamic programming; selection of prototypical algorithms; choice of data structures and representations; complexity measures: time, space, upper, lower bounds, asymptotic complexity; NP-completeness. Letter grading.", "pre-reqs": ["COM SCI 32", "MATH 61"], "co-reqs": []}, "COM SCI 174A": {"title": "Introduction to Computer Graphics", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 32. Basic principles behind modern two- and three-dimensional computer graphics systems, including complete set of steps that modern graphics pipelines use to create realistic images in real time. How to position and manipulate objects in scene using geometric and camera transformations. How to create final image using perspective and orthographic transformations. Basics of modeling primitives such as polygonal models and implicit and parametric surfaces. Basic ideas behind color spaces, illumination models, shading, and texture mapping. Letter grading.", "pre-reqs": ["COM SCI 32"], "co-reqs": []}, "COM SCI 161": {"title": "Fundamentals of Artificial Intelligence", "description": "Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisite: course 180. Introduction to fundamental problem solving and knowledge representation paradigms of artificial intelligence. Introduction to Lisp with regular programming assignments. State-space and problem reduction methods, brute-force and heuristic search, planning techniques, two-player games. Knowledge structures including predicate logic, production systems, semantic nets and primitives, frames, scripts. Special topics in natural language processing, expert systems, vision, and parallel architectures. Letter grading.", "pre-reqs": ["COM SCI 180"], "co-reqs": []}, "COM SCI 152B": {"title": "Digital Design Project Laboratory", "description": "Laboratory, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course M151B or Electrical Engineering M116C. Recommended: Engineering 183EW or 185EW. Limited to seniors. Design and implementation of complex digital subsystems using field-programmable gate arrays (e.g., processors, special-purpose processors, device controllers, and input/output interfaces). Students work in teams to develop and implement designs and to document and give oral presentations of their work. Letter grading.", "pre-reqs": ["COM SCI M151B"], "co-reqs": []}, "COM SCI 145": {"title": "Introduction to Data Mining", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 143. Introductory survey of data mining (process of automatic discovery of patterns, changes, associations, and anomalies in massive databases), knowledge engineering, and wide spectrum of data mining application areas such as bioinformatics, e-commerce, environmental studies, financial markets, multimedia data processing, network monitoring, and social service analysis. Letter grading.", "pre-reqs": ["COM SCI 143"], "co-reqs": []}, "COM SCI 136": {"title": "Introduction to Computer Security", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 118. Introduction to basic concepts of information security necessary for students to understand risks and mitigations associated with protection of systems and data. Topics include security models and architectures, security threats and risk analysis, access control and authentication/authorization, cryptography, network security, secure application design, and ethics and law. Letter grading.", "pre-reqs": ["COM SCI 118"], "co-reqs": []}, "COM SCI 132": {"title": "Compiler Construction", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Requisite: course 131. Compiler structure; lexical and syntactic analysis; semantic analysis and code generation; theory of parsing. Letter grading.", "pre-reqs": ["COM SCI 131"], "co-reqs": []}, "COM SCI 131": {"title": "Programming Languages", "description": "Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisites: courses 33, 35L. Basic concepts in design and use of programming languages, including abstraction, modularity, control mechanisms, types, declarations, syntax, and semantics. Study of several different language paradigms, including functional, object-oriented, and logic programming. Letter grading.", "pre-reqs": ["COM SCI 33", "COM SCI 35L"], "co-reqs": []}, "COM SCI 130": {"title": "Software Engineering", "description": "Lecture, four hours; laboratory, two hours; outside study, six hours. Requisites: courses 111, 131. Recommended requisite: Engineering 183EW or 185EW. Structured programming, program specification, program proving, modularity, abstract data types, composite design, software tools, software control systems, program testing, team programming. Letter grading.", "pre-reqs": ["COM SCI 111", "COM SCI 131"], "co-reqs": []}, "COM SCI 118": {"title": "Computer Network Fundamentals", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 111. Designed for juniors/seniors. Introduction to design and performance evaluation of computer networks, including such topics as what protocols are, layered network architecture, Internet protocol architecture, network applications, transport protocols, routing algorithms and protocols, internetworking, congestion control, and link layer protocols including Ethernet and wireless channels. Letter grading.", "pre-reqs": ["COM SCI 111"], "co-reqs": []}, "COM SCI 111": {"title": "Operating Systems Principles", "description": "Lecture, four hours; laboratory, two hours; outside study, nine hours. Enforced requisites: courses 32, 33, 35L. Introduction to operating systems design and evaluation. Computer software systems performance, robustness, and functionality. Kernel structure, bootstrapping, input/output (I/O) devices and interrupts. Processes and threads; address spaces, memory management, and virtual memory. Scheduling, synchronization. File systems: layout, performance, robustness. Distributed systems: networking, remote procedure call (RPC), asynchronous RPC, distributed file systems, transactions. Protection and security. Exercises involving applications using, and internals of, real-world operating systems. Letter grading.", "pre-reqs": ["COM SCI 32", "COM SCI 33", "COM SCI 35L"], "co-reqs": []}, "COM SCI 97": {"title": "Variable Topics in Computer Science: Launch: Turn Idea into Company", "description": "Lecture, one to four hours; discussion, zero to two hours. Designed for freshmen/sophomores. Variable topics in computer science not covered in regular computer science courses. May be repeated once for credit with topic or instructor change. Letter grading.", "pre-reqs": [], "co-reqs": []}, "COM SCI 35L": {"title": "Software Construction", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Requisite: course 31. Fundamentals of tools and environments for software construction projects, particularly open-source platforms used in upper-division computer science courses. Software practice through collaborative student project. Letter grading.", "pre-reqs": ["COM SCI 31"], "co-reqs": []}, "COM SCI 33": {"title": "Introduction to Computer Organization", "description": "Lecture, four hours; discussion, two hours; outside study, nine hours. Enforced requisite: course 32. Introductory course on computer architecture, assembly language, and operating systems fundamentals. Number systems, machine language, and assembly language. Procedure calls, stacks, interrupts, and traps. Assemblers, linkers, and loaders. Operating systems concepts: processes and process management, input/output (I/O) programming, memory management, file systems. Letter grading.", "pre-reqs": ["COM SCI 32"], "co-reqs": []}, "COM SCI 32": {"title": "Introduction to Computer Science II", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 31. Object-oriented software development. Abstract data type definition and use. Overloading, inheritance, polymorphism. Object-oriented view of data structures: stacks, queues, lists. Algorithm analysis. Trees, graphs, and associated algorithms. Searching and sorting. Case studies and exercises from computer science applications. Letter grading.", "pre-reqs": ["COM SCI 31"], "co-reqs": []}, "COM SCI 31": {"title": "Introduction to Computer Science I", "description": "Lecture, four hours; discussion, two hours; outside study, six hours. Introduction to computer science via theory, applications, and programming. Basic data types, operators and control structures. Input/output. Procedural and data abstraction. Introduction to object-oriented software development. Functions, recursion. Arrays, strings, pointers. Abstract data types, object-oriented programming. Examples and exercises from computer science theory and applications. Letter grading.", "pre-reqs": [], "co-reqs": []}}